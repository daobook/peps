# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-31 09:39+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"

#: ../../pep-0702.rst
msgid "Author"
msgstr ""

#: ../../pep-0702.rst:3
msgid "Jelle Zijlstra <jelle.zijlstra@gmail.com>"
msgstr ""

#: ../../pep-0702.rst
msgid "Discussions-To"
msgstr ""

#: ../../pep-0702.rst:4
msgid ""
"https://discuss.python.org/t/pep-702-marking-deprecations-using-the-type-"
"system/23036"
msgstr ""

#: ../../pep-0702.rst
msgid "Status"
msgstr ""

#: ../../pep-0702.rst:5
msgid "Draft"
msgstr ""

#: ../../pep-0702.rst
msgid "Type"
msgstr ""

#: ../../pep-0702.rst:6
msgid "Standards Track"
msgstr ""

#: ../../pep-0702.rst
msgid "Topic"
msgstr ""

#: ../../pep-0702.rst:7
msgid "Typing"
msgstr ""

#: ../../pep-0702.rst
msgid "Created"
msgstr ""

#: ../../pep-0702.rst:9
msgid "30-Dec-2022"
msgstr ""

#: ../../pep-0702.rst
msgid "Python-Version"
msgstr ""

#: ../../pep-0702.rst:10
msgid "3.12"
msgstr ""

#: ../../pep-0702.rst
msgid "Post-History"
msgstr ""

#: ../../pep-0702.rst:11
msgid ""
"`01-Jan-2023 <https://mail.python.org/archives/list/typing-"
"sig@python.org/thread/AKTFUYW3WDT7R7PGRIJQZMYHMDJNE4QH/>`__, `22-Jan-2023"
" <https://discuss.python.org/t/pep-702-marking-deprecations-using-the-"
"type-system/23036>`__"
msgstr ""

#: ../../pep-0702.rst:16
msgid "Abstract"
msgstr ""

#: ../../pep-0702.rst:18
msgid ""
"This PEP adds an ``@typing.deprecated()`` decorator that marks a class or"
" function as deprecated, enabling static checkers to warn when it is "
"used."
msgstr ""

#: ../../pep-0702.rst:22
msgid "Motivation"
msgstr ""

#: ../../pep-0702.rst:24
msgid ""
"As software evolves, new functionality is added and old functionality "
"becomes obsolete. Library developers want to work towards removing "
"obsolete code while giving their users time to migrate to new APIs. "
"Python provides a mechanism for achieving these goals: the "
":exc:`DeprecationWarning` warning class, which is used to show warnings "
"when deprecated functionality is used. This mechanism is widely used: as "
"of the writing of this PEP, the CPython main branch contains about 150 "
"distinct code paths that raise :exc:`!DeprecationWarning`. Many third-"
"party libraries also use :exc:`!DeprecationWarning` to mark deprecations."
" In the `top 5000 PyPI packages <https://dev.to/hugovk/how-to-search-5000"
"-python-projects-31gk>`__, there are:"
msgstr ""

#: ../../pep-0702.rst:35
msgid ""
"1911 matches for the regex ``warnings\\.warn.*\\bDeprecationWarning\\b``,"
" indicating use of :exc:`!DeprecationWarning` (not including cases where "
"the warning is split over multiple lines);"
msgstr ""

#: ../../pep-0702.rst:38
msgid ""
"1661 matches for the regex ``^\\s*@deprecated``, indicating use of some "
"sort of deprecation decorator."
msgstr ""

#: ../../pep-0702.rst:41
msgid ""
"However, the current mechanism is often insufficient to ensure that users"
" of deprecated functionality update their code in time. For example, the "
"removal of various long-deprecated :mod:`unittest` features had to be "
"`reverted "
"<https://github.com/python/cpython/commit/b50322d20337ca468f2070eedb051a16ee1eba94>`__"
" from Python 3.11 to give users more time to update their code. Users may"
" run their test suite with warnings disabled for practical reasons, or "
"deprecations may be triggered in code paths that are not covered by "
"tests."
msgstr ""

#: ../../pep-0702.rst:49
msgid ""
"Providing more ways for users to find out about deprecated functionality "
"can speed up the migration process. This PEP proposes to leverage static "
"type checkers to communicate deprecations to users. Such checkers have a "
"thorough semantic understanding of user code, enabling them to detect and"
" report deprecations that a single ``grep`` invocation could not find. In"
" addition, many type checkers integrate with IDEs, enabling users to see "
"deprecation warnings right in their editors."
msgstr ""

#: ../../pep-0702.rst:58
msgid "Rationale"
msgstr ""

#: ../../pep-0702.rst:60
msgid ""
"At first glance, deprecations may not seem like a topic that type "
"checkers should touch. After all, type checkers are concerned with "
"checking whether code will work as is, not with potential future changes."
" However, the analysis that type checkers perform on code to find type "
"errors is very similar to the analysis that would be needed to detect "
"usage of many deprecations. Therefore, type checkers are well placed to "
"find and report deprecations."
msgstr ""

#: ../../pep-0702.rst:67
msgid "Other languages already have similar functionality:"
msgstr ""

#: ../../pep-0702.rst:69
msgid ""
"GCC supports a ``deprecated`` `attribute "
"<https://gcc.gnu.org/onlinedocs/gcc-3.1.1/gcc/Type-Attributes.html>`__ on"
" function declarations. This powers CPython's ``Py_DEPRECATED`` macro."
msgstr ""

#: ../../pep-0702.rst:71
msgid ""
"GraphQL `supports <https://spec.graphql.org/June2018/#sec-Field-"
"Deprecation>`__ marking fields as ``@deprecated``."
msgstr ""

#: ../../pep-0702.rst:73
msgid ""
"Kotlin `supports "
"<https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-deprecated/>`__ a "
"``Deprecated`` annotation."
msgstr ""

#: ../../pep-0702.rst:75
msgid ""
"Scala `supports <https://www.scala-"
"lang.org/api/2.12.5/scala/deprecated.html>`__ an ``@deprecated`` "
"annotation."
msgstr ""

#: ../../pep-0702.rst:77
msgid ""
"Swift `supports <https://docs.swift.org/swift-"
"book/ReferenceManual/Attributes.html>`__ using the ``@available`` "
"attribute to mark APIs as deprecated."
msgstr ""

#: ../../pep-0702.rst:79
msgid ""
"TypeScript `uses <https://www.typescriptlang.org/docs/handbook/jsdoc-"
"supported-types.html#deprecated>`__ the ``@deprecated`` JSDoc tag to "
"issue a hint marking use of deprecated functionality."
msgstr ""

#: ../../pep-0702.rst:83
msgid "Several users have requested support for such a feature:"
msgstr ""

#: ../../pep-0702.rst:85
msgid ""
"`typing-sig thread <https://mail.python.org/archives/list/typing-"
"sig@python.org/thread/E24WTMQUTGKPFKEXVCGGEFFMG7LDF3WT/>`__"
msgstr ""

#: ../../pep-0702.rst:86
msgid ""
"`Pyright feature request "
"<https://github.com/microsoft/pyright/discussions/2300>`__"
msgstr ""

#: ../../pep-0702.rst:87
msgid "`mypy feature request <https://github.com/python/mypy/issues/11439>`__"
msgstr ""

#: ../../pep-0702.rst:89
msgid "There are similar existing third-party tools:"
msgstr ""

#: ../../pep-0702.rst:91
msgid ""
"`Deprecated <https://pypi.org/project/Deprecated/>`__ provides a "
"decorator to mark classes, functions, or methods as deprecated. Access to"
" decorated objects raises a runtime warning, but is not detected by type "
"checkers."
msgstr ""

#: ../../pep-0702.rst:94
msgid ""
"`flake8-deprecated <https://pypi.org/project/flake8-deprecated/>`__ is a "
"linter plugin that warns about use of deprecated features. However, it is"
" limited to a short, hard-coded list of deprecations."
msgstr ""

#: ../../pep-0702.rst:99
msgid "Specification"
msgstr ""

#: ../../pep-0702.rst:101
msgid ""
"A new decorator ``@deprecated()`` is added to the :mod:`typing` module. "
"This decorator can be used on a class, function or method to mark it as "
"deprecated. This includes :class:`typing.TypedDict` and "
":class:`typing.NamedTuple` definitions. With overloaded functions, the "
"decorator may be applied to individual overloads, indicating that the "
"particular overload is deprecated. The decorator may also be applied to "
"the overload implementation function, indicating that the entire function"
" is deprecated."
msgstr ""

#: ../../pep-0702.rst:109
msgid ""
"The decorator takes a single argument of type ``str``, which is a message"
" that should be shown by the type checker when it encounters a usage of "
"the decorated object. The message must be a string literal. The content "
"of deprecation messages is up to the user, but it may include the version"
" in which the deprecated object is to be removed, and information about "
"suggested replacement APIs."
msgstr ""

#: ../../pep-0702.rst:116
msgid ""
"Type checkers should produce a diagnostic whenever they encounter a usage"
" of an object marked as deprecated. For deprecated overloads, this "
"includes all calls that resolve to the deprecated overload. For "
"deprecated classes and functions, this includes:"
msgstr ""

#: ../../pep-0702.rst:121
msgid ""
"References through module, class, or instance attributes "
"(``module.deprecated_object``, ``module.SomeClass.deprecated_method``, "
"``module.SomeClass().deprecated_method``)"
msgstr ""

#: ../../pep-0702.rst:123
msgid ""
"Any usage of deprecated objects in their defining module (``x = "
"deprecated_object()`` in ``module.py``)"
msgstr ""

#: ../../pep-0702.rst:125
msgid ""
"If ``import *`` is used, usage of deprecated objects from the module "
"(``from module import *; x = deprecated_object()``)"
msgstr ""

#: ../../pep-0702.rst:127
msgid "``from`` imports (``from module import deprecated_object``)"
msgstr ""

#: ../../pep-0702.rst:129
msgid ""
"There are some additional scenarios where deprecations could come into "
"play:"
msgstr ""

#: ../../pep-0702.rst:131
msgid ""
"An object implements a :class:`typing.Protocol`, but one of the methods "
"required for protocol compliance is deprecated."
msgstr ""

#: ../../pep-0702.rst:133
msgid ""
"A class uses the ``@override`` decorator from :pep:`698` to assert that "
"its method overrides a base class method, but the base class method is "
"deprecated."
msgstr ""

#: ../../pep-0702.rst:137
msgid ""
"As these scenarios appear complex and relatively unlikely to come up in "
"practice, this PEP does not mandate that type checkers detect them."
msgstr ""

#: ../../pep-0702.rst:141
msgid "Example"
msgstr ""

#: ../../pep-0702.rst:143
msgid "As an example, consider this library stub named ``library.pyi``:"
msgstr ""

#: ../../pep-0702.rst:161
msgid "Here is how type checkers should handle usage of this library:"
msgstr ""

#: ../../pep-0702.rst:176
msgid "Runtime behavior"
msgstr ""

#: ../../pep-0702.rst:178
msgid ""
"At runtime, the decorator sets an attribute ``__deprecated__`` on the "
"decorated object. The value of the attribute is the message passed to the"
" decorator. The decorator returns the original object. Notably, it does "
"not issue a runtime :exc:`DeprecationWarning`."
msgstr ""

#: ../../pep-0702.rst:183
msgid ""
"For compatibility with :func:`typing.get_overloads`, the ``@deprecated`` "
"decorator should be placed after the ``@overload`` decorator."
msgstr ""

#: ../../pep-0702.rst:187
msgid "Type checker behavior"
msgstr ""

#: ../../pep-0702.rst:189
msgid ""
"This PEP does not specify exactly how type checkers should present "
"deprecation diagnostics to their users. However, some users (e.g., "
"application developers targeting only a specific version of Python) may "
"not care about deprecations, while others (e.g., library developers who "
"want their library to remain compatible with future versions of Python) "
"would want to catch any use of deprecated functionality in their CI "
"pipeline. Therefore, it is recommended that type checkers provide "
"configuration options that cover both use cases. As with any other type "
"checker error, it is also possible to ignore deprecations using ``# type:"
" ignore`` comments."
msgstr ""

#: ../../pep-0702.rst:200
msgid "Deprecation policy"
msgstr ""

#: ../../pep-0702.rst:202
msgid ""
"We propose that CPython's deprecation policy (:pep:`387`) is updated to "
"require that new deprecations use the functionality in this PEP to alert "
"users about the deprecation, if possible. Concretely, this means that new"
" deprecations should be accompanied by a change to the ``typeshed`` repo "
"to add the ``@deprecated`` decorator in the appropriate place. This "
"requirement does not apply to deprecations that cannot be expressed using"
" this PEP's functionality."
msgstr ""

#: ../../pep-0702.rst:211
msgid "Backwards compatibility"
msgstr ""

#: ../../pep-0702.rst:213
msgid ""
"Creating a new decorator poses no backwards compatibility concerns. As "
"with all new typing functionality, the ``@deprecated`` decorator will be "
"added to the ``typing_extensions`` module, enabling its use in older "
"versions of Python."
msgstr ""

#: ../../pep-0702.rst:219
msgid "How to teach this"
msgstr ""

#: ../../pep-0702.rst:221
msgid ""
"For users who encounter deprecation warnings in their IDE or type checker"
" output, the messages they receive should be clear and self-explanatory. "
"Usage of the ``@deprecated`` decorator will be an advanced feature mostly"
" relevant to library authors. The decorator should be mentioned in "
"relevant documentation (e.g., :pep:`387` and the "
":exc:`DeprecationWarning` documentation) as an additional way to mark "
"deprecated functionality."
msgstr ""

#: ../../pep-0702.rst:229
msgid "Reference implementation"
msgstr ""

#: ../../pep-0702.rst:231
msgid ""
"A runtime implementation of the ``@deprecated`` decorator is `available "
"<https://github.com/python/typing_extensions/pull/105>`__. The "
"``pyanalyze`` type checker has `prototype support "
"<https://github.com/quora/pyanalyze/pull/578>`__ for emitting deprecation"
" errors."
msgstr ""

#: ../../pep-0702.rst:238
msgid "Rejected ideas"
msgstr ""

#: ../../pep-0702.rst:241
msgid "Deprecation of modules and attributes"
msgstr ""

#: ../../pep-0702.rst:243
msgid ""
"This PEP covers deprecations of classes, functions and overloads. This "
"allows type checkers to detect many but not all possible deprecations. To"
" evaluate whether additional functionality would be worthwhile, I "
"`examined "
"<https://gist.github.com/JelleZijlstra/ff459edc5ff0918e22b56740bb28eb8b>`__"
" all current deprecations in the CPython standard library."
msgstr ""

#: ../../pep-0702.rst:249
msgid "I found:"
msgstr ""

#: ../../pep-0702.rst:251
msgid "74 deprecations of functions, methods and classes (supported by this PEP)"
msgstr ""

#: ../../pep-0702.rst:252
msgid "28 deprecations of whole modules (largely due to :pep:`594`)"
msgstr ""

#: ../../pep-0702.rst:253
msgid ""
"9 deprecations of function parameters (supported by this PEP through "
"decorating overloads)"
msgstr ""

#: ../../pep-0702.rst:255
msgid "1 deprecation of a constant"
msgstr ""

#: ../../pep-0702.rst:256
msgid ""
"38 deprecations that are not easily detectable in the type system (for "
"example, for calling :func:`asyncio.get_event_loop` without an active "
"event loop)"
msgstr ""

#: ../../pep-0702.rst:260
msgid ""
"Modules could be marked as deprecated by adding a ``__deprecated__`` "
"module-level constant. However, the need for this is limited, and it is "
"relatively easy to detect usage of deprecated modules simply by grepping."
" Therefore, this PEP omits support for whole-module deprecations. As a "
"workaround, users could mark all module-level classes and functions with "
"``@deprecated``."
msgstr ""

#: ../../pep-0702.rst:267
msgid ""
"For deprecating module-level constants, object attributes, and function "
"parameters, a ``Deprecated[type, message]`` type modifier, similar to "
"``Annotated`` could be added. However, this would create a new place in "
"the type system where strings are just strings, not forward references, "
"complicating the implementation of type checkers. In addition, my data "
"show that this feature is not commonly needed."
msgstr ""

#: ../../pep-0702.rst:274
msgid ""
"Features for deprecating more kinds of objects could be added in a future"
" PEP."
msgstr ""

#: ../../pep-0702.rst:278
msgid "Open issues"
msgstr ""

#: ../../pep-0702.rst:281
msgid "Runtime warnings"
msgstr ""

#: ../../pep-0702.rst:283
msgid ""
"Users might expect usage of the ``@deprecated`` decorator to issue a "
":exc:`DeprecationWarning` at runtime. However, this would raise a number "
"of thorny issues:"
msgstr ""

#: ../../pep-0702.rst:287
msgid ""
"When the decorator is applied to a class or an overload, the warning "
"would not be raised as expected. For classes, the warning could be raised"
" on instantiation, but this would not cover usage in type annotations or "
":func:`isinstance` checks."
msgstr ""

#: ../../pep-0702.rst:291
msgid ""
"Users may want to control the :func:`~warnings.warn` call in more detail "
"(e.g., changing the warning class)."
msgstr ""

#: ../../pep-0702.rst:293
msgid "``typing.py`` generally aims to avoid affecting runtime behavior."
msgstr ""

#: ../../pep-0702.rst:294
msgid ""
"To raise a warning, the ``@deprecated`` decorator would have to wrap "
"functions and patch ``__new__`` on classes. This would complicate runtime"
" introspection."
msgstr ""

#: ../../pep-0702.rst:297
msgid ""
"Users may not expect usage of an object from the ``typing`` module to "
"affect runtime behavior."
msgstr ""

#: ../../pep-0702.rst:300
msgid ""
"Users who want to use ``@deprecated`` while also issuing a runtime "
"warning can use the ``if TYPE_CHECKING:`` idiom, for example:"
msgstr ""

#: ../../pep-0702.rst:322
msgid ""
"While this code block looks complex, it could be encapsulated in a "
"library."
msgstr ""

#: ../../pep-0702.rst:324
msgid ""
"Still, the behavior could be made opt-in, and perhaps the benefits of "
"incorporating a runtime warning outweigh the costs."
msgstr ""

#: ../../pep-0702.rst:328
msgid "Acknowledgments"
msgstr ""

#: ../../pep-0702.rst:330
msgid ""
"A call with the typing-sig meetup group led to useful feedback on this "
"proposal."
msgstr ""

#: ../../pep-0702.rst:334
msgid "Copyright"
msgstr ""

#: ../../pep-0702.rst:336
msgid ""
"This document is placed in the public domain or under the "
"CC0-1.0-Universal license, whichever is more permissive."
msgstr ""

