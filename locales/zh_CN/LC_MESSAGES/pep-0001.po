# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the PEPs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PEPs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-12 17:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../pep-0001.txt
msgid "PEP"
msgstr ""

#: ../../pep-0001.txt:1
msgid "1"
msgstr ""

#: ../../pep-0001.txt
msgid "Title"
msgstr ""

#: ../../pep-0001.txt:2
msgid "PEP Purpose and Guidelines"
msgstr ""

#: ../../pep-0001.txt
msgid "Author"
msgstr ""

#: ../../pep-0001.txt:3
msgid "Barry Warsaw, Jeremy Hylton, David Goodger, Nick Coghlan"
msgstr ""

#: ../../pep-0001.txt
msgid "Status"
msgstr ""

#: ../../pep-0001.txt:4
msgid "Active"
msgstr ""

#: ../../pep-0001.txt
msgid "Type"
msgstr ""

#: ../../pep-0001.txt:5
msgid "Process"
msgstr ""

#: ../../pep-0001.txt
msgid "Created"
msgstr ""

#: ../../pep-0001.txt:7
msgid "13-Jun-2000"
msgstr ""

#: ../../pep-0001.txt
msgid "Post-History"
msgstr ""

#: ../../pep-0001.txt:8
msgid "21-Mar-2001, 29-Jul-2002, 03-May-2003, 05-May-2012, 07-Apr-2013"
msgstr ""

#: ../../pep-0001.txt:13
msgid "What is a PEP?"
msgstr ""

#: ../../pep-0001.txt:15
msgid ""
"PEP stands for Python Enhancement Proposal.  A PEP is a design document "
"providing information to the Python community, or describing a new "
"feature for Python or its processes or environment.  The PEP should "
"provide a concise technical specification of the feature and a rationale "
"for the feature."
msgstr ""

#: ../../pep-0001.txt:21
msgid ""
"We intend PEPs to be the primary mechanisms for proposing major new "
"features, for collecting community input on an issue, and for documenting"
" the design decisions that have gone into Python.  The PEP author is "
"responsible for building consensus within the community and documenting "
"dissenting opinions."
msgstr ""

#: ../../pep-0001.txt:27
msgid ""
"Because the PEPs are maintained as text files in a versioned repository, "
"their revision history is the historical record of the feature proposal "
"[1]_."
msgstr ""

#: ../../pep-0001.txt:33
msgid "PEP Audience"
msgstr ""

#: ../../pep-0001.txt:35
msgid ""
"The typical primary audience for PEPs are the core developers of the "
"CPython reference interpreter and their elected Steering Council, as well"
" as developers of other implementations of the Python language "
"specification."
msgstr ""

#: ../../pep-0001.txt:39
msgid ""
"However, other parts of the Python community may also choose to use the "
"process (particularly for Informational PEPs) to document expected API "
"conventions and to manage complex design coordination problems that "
"require collaboration across multiple projects."
msgstr ""

#: ../../pep-0001.txt:46
msgid "PEP Types"
msgstr ""

#: ../../pep-0001.txt:48
msgid "There are three kinds of PEP:"
msgstr ""

#: ../../pep-0001.txt:50
msgid ""
"A **Standards Track** PEP describes a new feature or implementation for "
"Python. It may also describe an interoperability standard that will be "
"supported outside the standard library for current Python versions before"
" a subsequent PEP adds standard library support in a future version."
msgstr ""

#: ../../pep-0001.txt:56
msgid ""
"An **Informational** PEP describes a Python design issue, or provides "
"general guidelines or information to the Python community, but does not "
"propose a new feature.  Informational PEPs do not necessarily represent a"
" Python community consensus or recommendation, so users and implementers "
"are free to ignore Informational PEPs or follow their advice."
msgstr ""

#: ../../pep-0001.txt:63
msgid ""
"A **Process** PEP describes a process surrounding Python, or proposes a "
"change to (or an event in) a process.  Process PEPs are like Standards "
"Track PEPs but apply to areas other than the Python language itself.  "
"They may propose an implementation, but not to Python's codebase; they "
"often require community consensus; unlike Informational PEPs, they are "
"more than recommendations, and users are typically not free to ignore "
"them.  Examples include procedures, guidelines, changes to the decision-"
"making process, and changes to the tools or environment used in Python "
"development. Any meta-PEP is also considered a Process PEP."
msgstr ""

#: ../../pep-0001.txt:76
msgid "PEP Workflow"
msgstr ""

#: ../../pep-0001.txt:79
msgid "Python's Steering Council"
msgstr ""

#: ../../pep-0001.txt:81
msgid ""
"There are several references in this PEP to the \"Steering Council\" or "
"\"Council\". This refers to the current members of the elected Steering "
"Council described in PEP 13 [5]_, in their role as the final authorities "
"on whether or not PEPs will be accepted or rejected."
msgstr ""

#: ../../pep-0001.txt:88
msgid "Python's Core Developers"
msgstr ""

#: ../../pep-0001.txt:90
msgid ""
"There are several references in this PEP to \"core developers\". This "
"refers to the currently active Python core team members described in PEP "
"13 [5]_."
msgstr ""

#: ../../pep-0001.txt:95
msgid "Python's BDFL"
msgstr ""

#: ../../pep-0001.txt:97
msgid ""
"Previous versions of this PEP used the title \"BDFL-Delegate\" for PEP "
"decision makers. This was a historical reference to Python's previous "
"governance model, where all design authority ultimately derived from "
"Guido van Rossum, the original creator of the Python programming "
"language. By contrast, the Steering Council's design authority derives "
"from their election by the currently active core developers. Now, PEP-"
"Delegate is used in place of BDFL-Delegate."
msgstr ""

#: ../../pep-0001.txt:106
msgid "PEP Editors"
msgstr ""

#: ../../pep-0001.txt:108
msgid ""
"The PEP editors are individuals responsible for managing the "
"administrative and editorial aspects of the PEP workflow (e.g. assigning "
"PEP numbers and changing their status).  See `PEP Editor Responsibilities"
" & Workflow`_ for details."
msgstr ""

#: ../../pep-0001.txt:113
msgid ""
"PEP editorship is by invitation of the current editors, and they can be "
"contacted by mentioning ``@python/pep-editors`` on GitHub.  All of the "
"PEP workflow can be conducted via the GitHub `PEP repository`_ issues and"
" pull requests."
msgstr ""

#: ../../pep-0001.txt:120
msgid "Start with an idea for Python"
msgstr ""

#: ../../pep-0001.txt:122
msgid ""
"The PEP process begins with a new idea for Python.  It is highly "
"recommended that a single PEP contain a single key proposal or new idea. "
"Small enhancements or patches often don't need a PEP and can be injected "
"into the Python development workflow with a patch submission to the "
"Python `issue tracker`_. The more focused the PEP, the more successful it"
" tends to be.  The PEP editors reserve the right to reject PEP proposals "
"if they appear too unfocused or too broad.  If in doubt, split your PEP "
"into several well-focused ones."
msgstr ""

#: ../../pep-0001.txt:131
msgid ""
"Each PEP must have a champion -- someone who writes the PEP using the "
"style and format described below, shepherds the discussions in the "
"appropriate forums, and attempts to build community consensus around the "
"idea.  The PEP champion (a.k.a. Author) should first attempt to ascertain"
" whether the idea is PEP-able.  Posting to the comp.lang.python newsgroup"
" (a.k.a. python-list@python.org mailing list) or the python-"
"ideas@python.org mailing list is the best way to go about this."
msgstr ""

#: ../../pep-0001.txt:139
msgid ""
"Vetting an idea publicly before going as far as writing a PEP is meant to"
" save the potential author time. Many ideas have been brought forward for"
" changing Python that have been rejected for various reasons. Asking the "
"Python community first if an idea is original helps prevent too much time"
" being spent on something that is guaranteed to be rejected based on "
"prior discussions (searching the internet does not always do the trick). "
"It also helps to make sure the idea is applicable to the entire community"
" and not just the author. Just because an idea sounds good to the author "
"does not mean it will work for most people in most areas where Python is "
"used."
msgstr ""

#: ../../pep-0001.txt:150
msgid ""
"Once the champion has asked the Python community as to whether an idea "
"has any chance of acceptance, a draft PEP should be presented to python-"
"ideas.  This gives the author a chance to flesh out the draft PEP to make"
" properly formatted, of high quality, and to address initial concerns "
"about the proposal."
msgstr ""

#: ../../pep-0001.txt:158
msgid "Submitting a PEP"
msgstr ""

#: ../../pep-0001.txt:160
msgid ""
"Following a discussion on python-ideas, the workflow varies based on "
"whether any of the PEP's co-authors are core developers. If one or more "
"of the PEP's co-authors are core developers, they are responsible for "
"following the process outlined below. Otherwise (i.e. none of the co-"
"authors are core developers), then the PEP author(s) will need to find a "
"sponsor for the PEP."
msgstr ""

#: ../../pep-0001.txt:166
msgid ""
"Ideally, a core developer sponsor is identified, but non-core sponsors "
"may also be selected with the approval of the Steering Council.  Members "
"of the GitHub \"PEP editors\" team are pre-approved to be sponsors.  The "
"sponsor's job is to provide guidance to the PEP author to help them "
"through the logistics of the PEP process (somewhat acting like a mentor)."
"  Being a sponsor does **not** disqualify that person from becoming a co-"
"author or PEP-Delegate later on (but not both).  The sponsor of a PEP is "
"recorded in the \"Sponsor:\" field of the header."
msgstr ""

#: ../../pep-0001.txt:175
msgid ""
"Once the sponsor or the core developer(s) co-authoring the PEP deem the "
"PEP ready for submission, the proposal should be submitted as a draft PEP"
" via a `GitHub pull request`_.  The draft must be written in PEP style as"
" described below, else it will fail review immediately (although minor "
"errors may be corrected by the editors)."
msgstr ""

#: ../../pep-0001.txt:181
msgid "The standard PEP workflow is:"
msgstr ""

#: ../../pep-0001.txt:183
msgid ""
"You, the PEP author, fork the `PEP repository`_, and create a file named "
"``pep-9999.rst`` that contains your new PEP.  Use \"9999\" as your draft "
"PEP number."
msgstr ""

#: ../../pep-0001.txt:187
msgid ""
"In the \"Type:\" header field, enter \"Standards Track\", "
"\"Informational\", or \"Process\" as appropriate, and for the \"Status:\""
" field enter \"Draft\".  For full details, see `PEP Header Preamble`_."
msgstr ""

#: ../../pep-0001.txt:191
msgid ""
"Update `.github/CODEOWNERS` [7]_ such that any core developer co-"
"author(s) or sponsor are listed for your new file such that any future "
"pull requests will be assigned to them."
msgstr ""

#: ../../pep-0001.txt:195
msgid "Push this to your GitHub fork and submit a pull request."
msgstr ""

#: ../../pep-0001.txt:197
msgid ""
"The PEP editors review your PR for structure, formatting, and other "
"errors.  For a reST-formatted PEP, PEP 12 is provided as a template. It "
"also provides a complete introduction to reST markup that is used in "
"PEPs.  Approval criteria are:"
msgstr ""

#: ../../pep-0001.txt:202
msgid ""
"It sound and complete.  The ideas must make technical sense.  The editors"
" do not consider whether they seem likely to be accepted."
msgstr ""

#: ../../pep-0001.txt:204
msgid "The title accurately describes the content."
msgstr ""

#: ../../pep-0001.txt:205
msgid ""
"The PEP's language (spelling, grammar, sentence structure, etc.) and code"
" style (examples should match PEP 8 & PEP 7) should be correct and "
"conformant.  The PEP will be checked for formatting (plain text or "
"reStructuredText) by Travis CI, and will not be approved until this "
"passes."
msgstr ""

#: ../../pep-0001.txt:211
msgid ""
"Editors are generally quite lenient about this initial review, expecting "
"that problems will be corrected by the reviewing process. **Note:** "
"Approval of the PEP is no guarantee that there are no embarrassing "
"mistakes!  Correctness is the responsibility of authors and reviewers, "
"not the editors."
msgstr ""

#: ../../pep-0001.txt:217
msgid ""
"If the PEP isn't ready for approval, an editor will send it back to the "
"author for revision, with specific instructions."
msgstr ""

#: ../../pep-0001.txt:220
msgid "Once approved, they will assign your PEP a number."
msgstr ""

#: ../../pep-0001.txt:222
msgid ""
"Once the review process is complete, and the PEP editors approve it (note"
" that this is *not* the same as accepting your PEP!), they will squash "
"commit your pull request onto master."
msgstr ""

#: ../../pep-0001.txt:226
msgid ""
"The PEP editors will not unreasonably deny publication of a PEP.  Reasons"
" for denying PEP status include duplication of effort, being technically "
"unsound, not providing proper motivation or addressing backwards "
"compatibility, or not in keeping with the Python philosophy.  The "
"Steering Council can be consulted during the approval phase, and are the "
"final arbiter of a draft's PEP-ability."
msgstr ""

#: ../../pep-0001.txt:232
msgid ""
"Developers with git push privileges for the `PEP repository`_ may claim "
"PEP numbers directly by creating and committing a new PEP. When doing so,"
" the developer must handle the tasks that would normally be taken care of"
" by the PEP editors (see `PEP Editor Responsibilities & Workflow`_). This"
" includes ensuring the initial version meets the expected standards for "
"submitting a PEP.  Alternately, even developers should submit PEPs via "
"pull request. When doing so, you are generally expected to handle the "
"process yourself; if you need assistance from PEP editors, mention "
"``@python/pep-editors`` on GitHub."
msgstr ""

#: ../../pep-0001.txt:242
msgid ""
"As updates are necessary, the PEP author can check in new versions if "
"they (or a collaborating developer) have git push privileges."
msgstr ""

#: ../../pep-0001.txt:245
msgid ""
"After a PEP number has been assigned, a draft PEP may be discussed "
"further on python-ideas (getting a PEP number assigned early can be "
"useful for ease of reference, especially when multiple draft PEPs are "
"being considered at the same time). Eventually, all Standards Track PEPs "
"must  be sent to the `python-dev list <mailto:python-dev@python.org>`__ "
"for review as described in the next section."
msgstr ""

#: ../../pep-0001.txt:252
msgid ""
"Standards Track PEPs consist of two parts, a design document and a "
"reference implementation.  It is generally recommended that at least a "
"prototype implementation be co-developed with the PEP, as ideas that "
"sound good in principle sometimes turn out to be impractical when "
"subjected to the test of implementation."
msgstr ""

#: ../../pep-0001.txt:258
msgid ""
"PEP authors are responsible for collecting community feedback on a PEP "
"before submitting it for review. However, wherever possible, long open-"
"ended discussions on public mailing lists should be avoided. Strategies "
"to keep the discussions efficient include: setting up a separate SIG "
"mailing list for the topic, having the PEP author accept private comments"
" in the early design phases, setting up a wiki page, etc. PEP authors "
"should use their discretion here."
msgstr ""

#: ../../pep-0001.txt:268
msgid "PEP Review & Resolution"
msgstr ""

#: ../../pep-0001.txt:270
msgid ""
"Once the authors have completed a PEP, they may request a review for "
"style and consistency from the PEP editors."
msgstr ""

#: ../../pep-0001.txt:273
msgid ""
"However, content review and final acceptance of the PEP must be requested"
" of the core developers, usually via an email to the python-dev mailing "
"list."
msgstr ""

#: ../../pep-0001.txt:276
msgid ""
"To expedite the process in selected cases (e.g. when a change is clearly "
"beneficial and ready to be accepted, but the PEP hasn't been formally "
"submitted for review yet), the Steering Council may also initiate a PEP "
"review, first notifying the PEP author(s) and giving them a chance to "
"make revisions."
msgstr ""

#: ../../pep-0001.txt:281
msgid ""
"The final authority for PEP approval is the Steering Council. However, "
"whenever a new PEP is put forward, any core developer that believes they "
"are suitably experienced to make the final decision on that PEP may offer"
" to serve as the PEP-Delegate for that PEP, and they will then have the "
"authority to approve (or reject) that PEP. Individuals taking on this "
"responsibility are free to seek additional guidance from the Steering "
"Council at any time, and are also expected to take the advice and "
"perspectives of other core developers into account."
msgstr ""

#: ../../pep-0001.txt:289
msgid ""
"The designated decision maker for each PEP is recorded in the \"PEP-"
"Delegate\" header in the PEP."
msgstr ""

#: ../../pep-0001.txt:292
msgid ""
"Such self-nominations are accepted by default, but may be explicitly "
"declined by the Steering Council. Possible reasons for the Steering "
"Council declining a self-nomination as PEP-Delegate include, but are not "
"limited to, perceptions of a potential conflict of interest (e.g. working"
" for the same organisation as the PEP submitter), or simply considering "
"another potential PEP-Delegate to be more appropriate. If core developers"
" (or other community members) have concerns regarding the suitability of "
"a PEP-Delegate for any given PEP, they may ask the Steering Council to "
"review the delegation."
msgstr ""

#: ../../pep-0001.txt:301
msgid ""
"If no volunteer steps forward, then the Steering Council will approach "
"core developers (and potentially other Python community members) with "
"relevant expertise, in an attempt to identify a candidate that is willing"
" to serve as PEP-Delegate for that PEP. If no suitable candidate can be "
"found, then the PEP will be marked as Deferred until one is available."
msgstr ""

#: ../../pep-0001.txt:307
msgid ""
"Previously appointed PEP-Delegates may choose to step down, or be asked "
"to step down by the Council, in which case a new PEP-Delegate will be "
"appointed in the same manner as for a new PEP (including deferral of the "
"PEP if no suitable replacement can be found). In the event that a PEP-"
"Delegate is asked to step down, this will overrule any prior acceptance "
"or rejection of the PEP, and it will revert to Draft status."
msgstr ""

#: ../../pep-0001.txt:314
msgid ""
"With the approval of the Steering Council, PEP review and resolution may "
"also occur on a list other than python-dev (for example, distutils-sig "
"for packaging related PEPs that don't immediately affect the standard "
"library). In these cases, the \"Discussions-To\" heading in the PEP will "
"identify the appropriate alternative list where discussion, review and "
"pronouncement on the PEP will occur."
msgstr ""

#: ../../pep-0001.txt:321
msgid ""
"When such standing delegations are put in place, the Steering Council "
"will maintain sufficient public records to allow subsequent Councils, the"
" core developers, and the wider Python community to understand the "
"delegations that currently exist, why they were put in place, and the "
"circumstances under which they may no longer be needed."
msgstr ""

#: ../../pep-0001.txt:327
msgid ""
"For a PEP to be accepted it must meet certain minimum criteria.  It must "
"be a clear and complete description of the proposed enhancement. The "
"enhancement must represent a net improvement.  The proposed "
"implementation, if applicable, must be solid and must not complicate the "
"interpreter unduly.  Finally, a proposed enhancement must be \"pythonic\""
" in order to be accepted by the Steering Council.  (However, \"pythonic\""
" is an imprecise term; it may be defined as whatever is acceptable to the"
" Steering Council.  This logic is intentionally circular.)  See PEP 2 "
"[2]_ for standard library module acceptance criteria."
msgstr ""

#: ../../pep-0001.txt:337
msgid ""
"Once a PEP has been accepted, the reference implementation must be "
"completed.  When the reference implementation is complete and "
"incorporated into the main source code repository, the status will be "
"changed to \"Final\"."
msgstr ""

#: ../../pep-0001.txt:341
msgid ""
"To allow gathering of additional design and interface feedback before "
"committing to long term stability for a language feature or standard "
"library API, a PEP may also be marked as \"Provisional\". This is short "
"for \"Provisionally Accepted\", and indicates that the proposal has been "
"accepted for inclusion in the reference implementation, but additional "
"user feedback is needed before the full design can be considered "
"\"Final\". Unlike regular accepted PEPs, provisionally accepted PEPs may "
"still be Rejected or Withdrawn *even after the related changes have been "
"included in a Python release*."
msgstr ""

#: ../../pep-0001.txt:350
msgid ""
"Wherever possible, it is considered preferable to reduce the scope of a "
"proposal to avoid the need to rely on the \"Provisional\" status (e.g. by"
" deferring some features to later PEPs), as this status can lead to "
"version compatibility challenges in the wider Python ecosystem. PEP 411 "
"provides additional details on potential use cases for the Provisional "
"status."
msgstr ""

#: ../../pep-0001.txt:356
msgid ""
"A PEP can also be assigned the status \"Deferred\".  The PEP author or an"
" editor can assign the PEP this status when no progress is being made on "
"the PEP.  Once a PEP is deferred, a PEP editor can reassign it to draft "
"status."
msgstr ""

#: ../../pep-0001.txt:361
msgid ""
"A PEP can also be \"Rejected\".  Perhaps after all is said and done it "
"was not a good idea.  It is still important to have a record of this "
"fact. The \"Withdrawn\" status is similar - it means that the PEP author "
"themselves has decided that the PEP is actually a bad idea, or has "
"accepted that a competing proposal is a better alternative."
msgstr ""

#: ../../pep-0001.txt:367
msgid ""
"When a PEP is Accepted, Rejected or Withdrawn, the PEP should be updated "
"accordingly. In addition to updating the status field, at the very least "
"the Resolution header should be added with a link to the relevant post in"
" the python-dev mailing list archives."
msgstr ""

#: ../../pep-0001.txt:372
msgid ""
"PEPs can also be superseded by a different PEP, rendering the original "
"obsolete.  This is intended for Informational PEPs, where version 2 of an"
" API can replace version 1."
msgstr ""

#: ../../pep-0001.txt:376
msgid "The possible paths of the status of PEPs are as follows:"
msgstr ""

msgid "PEP process flow diagram"
msgstr ""

#: ../../pep-0001.txt:381
msgid ""
"While not shown in the diagram, \"Accepted\" PEPs may technically move to"
" \"Rejected\" or \"Withdrawn\" even after acceptance. This will only "
"occur if the implementation process reveals fundamental flaws in the "
"design that were not noticed prior to acceptance of the PEP. Unlike "
"Provisional PEPs, these transitions are only permitted if the accepted "
"proposal has *not* been included in a Python release - released changes "
"must instead go through the regular deprecation process (which may "
"require a new PEP providing the rationale for the deprecation)."
msgstr ""

#: ../../pep-0001.txt:390
msgid ""
"Some Informational and Process PEPs may also have a status of \"Active\" "
"if they are never meant to be completed.  E.g. PEP 1 (this PEP)."
msgstr ""

#: ../../pep-0001.txt:395
msgid "PEP Maintenance"
msgstr ""

#: ../../pep-0001.txt:397
msgid ""
"In general, Standards track PEPs are no longer modified after they have "
"reached the Final state. Once a PEP has been completed, the Language and "
"Standard Library References become the formal documentation of the "
"expected behavior."
msgstr ""

#: ../../pep-0001.txt:402
msgid ""
"If changes based on implementation experience and user feedback are made "
"to Standards track PEPs while in the Accepted or Provisional State, those"
" changes should be noted in the PEP, such that the PEP accurately "
"describes the state of the implementation at the point where it is marked"
" Final."
msgstr ""

#: ../../pep-0001.txt:407
msgid ""
"Informational and Process PEPs may be updated over time to reflect "
"changes to development practices and other details. The precise process "
"followed in these cases will depend on the nature and purpose of the PEP "
"being updated."
msgstr ""

#: ../../pep-0001.txt:414
msgid "What belongs in a successful PEP?"
msgstr ""

#: ../../pep-0001.txt:416
msgid "Each PEP should have the following parts/sections:"
msgstr ""

#: ../../pep-0001.txt:418
msgid ""
"Preamble -- RFC 822 style headers containing meta-data about the PEP, "
"including the PEP number, a short descriptive title (limited to a maximum"
" of 44 characters), the names, and optionally the contact info for each "
"author, etc."
msgstr ""

#: ../../pep-0001.txt:423
msgid ""
"Abstract -- a short (~200 word) description of the technical issue being "
"addressed."
msgstr ""

#: ../../pep-0001.txt:426
msgid ""
"Motivation -- The motivation is critical for PEPs that want to change the"
" Python language, library, or ecosystem.  It should clearly explain why "
"the existing language specification is inadequate to address the problem "
"that the PEP solves.  This can include collecting documented support for "
"the PEP from important projects in the Python ecosystem.  PEP submissions"
" without sufficient motivation may be rejected."
msgstr ""

#: ../../pep-0001.txt:434
msgid ""
"Rationale -- The rationale fleshes out the specification by describing "
"why particular design decisions were made.  It should describe alternate "
"designs that were considered and related work, e.g. how the feature is "
"supported in other languages."
msgstr ""

#: ../../pep-0001.txt:439
msgid ""
"The rationale should provide evidence of consensus within the community "
"and discuss important objections or concerns raised during discussion."
msgstr ""

#: ../../pep-0001.txt:443
msgid ""
"Specification -- The technical specification should describe the syntax "
"and semantics of any new language feature.  The specification should be "
"detailed enough to allow competing, interoperable implementations for at "
"least the current major Python platforms (CPython, Jython, IronPython, "
"PyPy)."
msgstr ""

#: ../../pep-0001.txt:449
msgid ""
"Backwards Compatibility -- All PEPs that introduce backwards "
"incompatibilities must include a section describing these "
"incompatibilities and their severity.  The PEP must explain how the "
"author proposes to deal with these incompatibilities.  PEP submissions "
"without a sufficient backwards compatibility treatise may be rejected "
"outright."
msgstr ""

#: ../../pep-0001.txt:456
msgid ""
"Security Implications -- If there are security concerns in relation to "
"the PEP, those concerns should be explicitly written out to make sure "
"reviewers of the PEP are aware of them."
msgstr ""

#: ../../pep-0001.txt:460
msgid ""
"How to Teach This -- For a PEP that adds new functionality or changes "
"language behavior, it is helpful to include a section on how to teach "
"users, new and experienced, how to apply the PEP to their work."
msgstr ""

#: ../../pep-0001.txt:465
msgid ""
"This section may include key points and recommended documentation changes"
" that would help users adopt a new feature or migrate their code to use a"
" language change."
msgstr ""

#: ../../pep-0001.txt:469
msgid ""
"Reference Implementation -- The reference implementation must be "
"completed before any PEP is given status \"Final\", but it need not be "
"completed before the PEP is accepted.  While there is merit to the "
"approach of reaching consensus on the specification and rationale before "
"writing code, the principle of \"rough consensus and running code\" is "
"still useful when it comes to resolving many discussions of API details."
msgstr ""

#: ../../pep-0001.txt:477
msgid ""
"The final implementation must include test code and documentation "
"appropriate for either the Python language reference or the standard "
"library reference."
msgstr ""

#: ../../pep-0001.txt:481
msgid ""
"Rejected Ideas -- Throughout the discussion of a PEP, various ideas will "
"be proposed which are not accepted. Those rejected ideas should be "
"recorded along with the reasoning as to why they were rejected. This both"
" helps record the thought process behind the final version of the PEP as "
"well as preventing people from bringing up the same rejected idea again "
"in subsequent discussions."
msgstr ""

#: ../../pep-0001.txt:488
msgid ""
"In a way this section can be thought of as a breakout section of the "
"Rationale section that is focused specifically on why certain ideas were "
"not ultimately pursued."
msgstr ""

#: ../../pep-0001.txt:492
msgid ""
"Open Issues -- While a PEP is in draft, ideas can come up which warrant "
"further discussion. Those ideas should be recorded so people know that "
"they are being thought about but do not have a concrete resolution. This "
"helps make sure all issues required for the PEP to be ready for "
"consideration are complete and reduces people duplicating prior "
"discussion."
msgstr ""

#: ../../pep-0001.txt:499
msgid "References -- A collection of URLs used as references through the PEP."
msgstr ""

#: ../../pep-0001.txt:501
msgid ""
"Copyright/license -- Each new PEP must be placed under a dual license of "
"public domain and CC0-1.0-Universal_ (see this PEP for an example)."
msgstr ""

#: ../../pep-0001.txt:506
msgid "PEP Formats and Templates"
msgstr ""

#: ../../pep-0001.txt:508
msgid ""
"PEPs are UTF-8 encoded text files using the reStructuredText_ format. "
"ReStructuredText_ allows for rich markup that is still quite easy to "
"read, but also results in good-looking and functional HTML. PEP 12 "
"contains instructions and a template [4]_ for reStructuredText PEPs."
msgstr ""

#: ../../pep-0001.txt:513
msgid ""
"The PEP text files are automatically converted to HTML [6]_ for easier "
"`online reading <https://www.python.org/dev/peps/>`__."
msgstr ""

#: ../../pep-0001.txt:518
msgid "PEP Header Preamble"
msgstr ""

#: ../../pep-0001.txt:520
msgid ""
"Each PEP must begin with an RFC 822 style header preamble.  The headers "
"must appear in the following order.  Headers marked with \"*\" are "
"optional and are described below.  All other headers are required. ::"
msgstr ""

#: ../../pep-0001.txt:542
msgid ""
"The Author header lists the names, and optionally the email addresses of "
"all the authors/owners of the PEP.  The format of the Author header value"
" must be"
msgstr ""

#: ../../pep-0001.txt:546
msgid "Random J. User <address@dom.ain>"
msgstr ""

#: ../../pep-0001.txt:548
msgid "if the email address is included, and just"
msgstr ""

#: ../../pep-0001.txt:550
msgid "Random J. User"
msgstr ""

#: ../../pep-0001.txt:552
msgid ""
"if the address is not given.  For historical reasons the format "
"\"address@dom.ain (Random J. User)\" may appear in a PEP, however new "
"PEPs must use the mandated format above, and it is acceptable to change "
"to this format when PEPs are updated."
msgstr ""

#: ../../pep-0001.txt:557
msgid ""
"If there are multiple authors, each should be on a separate line "
"following RFC 2822 continuation line conventions.  Note that personal "
"email addresses in PEPs will be obscured as a defense against spam "
"harvesters."
msgstr ""

#: ../../pep-0001.txt:562
msgid ""
"The Sponsor field records which developer (core, or otherwise approved by"
" the Steering Council) is sponsoring the PEP.  If one of the authors of "
"the PEP is a core developer then no sponsor is necessary and thus this "
"field should be left out."
msgstr ""

#: ../../pep-0001.txt:567
msgid ""
"The PEP-Delegate field is used to record the individual appointed by the "
"Steering Council to make the final decision on whether or not to approve "
"or reject a PEP. (The delegate's email address is currently omitted due "
"to a limitation in the email address masking for reStructuredText PEPs)"
msgstr ""

#: ../../pep-0001.txt:572
msgid ""
"*Note: The Resolution header is required for Standards Track PEPs only.  "
"It contains a URL that should point to an email message or other web "
"resource where the pronouncement about the PEP is made.*"
msgstr ""

#: ../../pep-0001.txt:576
msgid ""
"For a PEP where final pronouncement will be made on a list other than "
"python-dev, a Discussions-To header will indicate the mailing list or URL"
" where the pronouncement will occur. A temporary Discussions-To header "
"may also be used when a draft PEP is being discussed prior to submission "
"for pronouncement. No Discussions-To header is necessary if the PEP is "
"being discussed privately with the author, or on the python-list, python-"
"ideas or python-dev mailing lists.  Note that email addresses in the "
"Discussions-To header will not be obscured."
msgstr ""

#: ../../pep-0001.txt:585
msgid ""
"The Type header specifies the type of PEP: Standards Track, "
"Informational, or Process."
msgstr ""

#: ../../pep-0001.txt:588
msgid ""
"The format of a PEP is specified with a Content-Type header.  The "
"acceptable values are \"text/plain\" for plaintext PEPs (see PEP 9 [3]_) "
"and \"text/x-rst\" for reStructuredText PEPs (see PEP 12 [4]_). "
"reStructuredText is strongly preferred, but for backwards compatibility "
"plain text is currently still the default if no Content-Type header is "
"present."
msgstr ""

#: ../../pep-0001.txt:595
msgid ""
"The Created header records the date that the PEP was assigned a number, "
"while Post-History is used to record the dates of when new versions of "
"the PEP are posted to python-ideas and/or python-dev.  Both headers "
"should be in dd-mmm-yyyy format, e.g. 14-Aug-2001."
msgstr ""

#: ../../pep-0001.txt:600
msgid ""
"Standards Track PEPs will typically have a Python-Version header which "
"indicates the version of Python that the feature will be released with. "
"Standards Track PEPs without a Python-Version header indicate "
"interoperability standards that will initially be supported through "
"external libraries and tools, and then potentially supplemented by a "
"later PEP to add support to the standard library. Informational and "
"Process PEPs do not need a Python-Version header."
msgstr ""

#: ../../pep-0001.txt:608
msgid ""
"PEPs may have a Requires header, indicating the PEP numbers that this PEP"
" depends on."
msgstr ""

#: ../../pep-0001.txt:611
msgid ""
"PEPs may also have a Superseded-By header indicating that a PEP has been "
"rendered obsolete by a later document; the value is the number of the PEP"
" that replaces the current document.  The newer PEP must have a Replaces "
"header containing the number of the PEP that it rendered obsolete."
msgstr ""

#: ../../pep-0001.txt:619
msgid "Auxiliary Files"
msgstr ""

#: ../../pep-0001.txt:621
msgid ""
"PEPs may include auxiliary files such as diagrams.  Such files should be "
"named ``pep-XXXX-Y.ext``, where \"XXXX\" is the PEP number, \"Y\" is a "
"serial number (starting at 1), and \"ext\" is replaced by the actual file"
" extension (e.g. \"png\")."
msgstr ""

#: ../../pep-0001.txt:626
msgid ""
"Alternatively, all support files may be placed in a subdirectory called "
"``pep-XXXX``, where \"XXXX\" is the PEP number. When using a "
"subdirectory, there are no constraints on the names used in files."
msgstr ""

#: ../../pep-0001.txt:632
msgid "Reporting PEP Bugs, or Submitting PEP Updates"
msgstr ""

#: ../../pep-0001.txt:634
msgid ""
"How you report a bug, or submit a PEP update depends on several factors, "
"such as the maturity of the PEP, the preferences of the PEP author, and "
"the nature of your comments.  For the early draft stages of the PEP, it's"
" probably best to send your comments and changes directly to the PEP "
"author.  For more mature, or finished PEPs you may want to submit "
"corrections as a `GitHub issue`_ or `GitHub pull request`_ so that your "
"changes don't get lost."
msgstr ""

#: ../../pep-0001.txt:642
msgid ""
"When in doubt about where to send your changes, please check first with "
"the PEP author and/or a PEP editor."
msgstr ""

#: ../../pep-0001.txt:645
msgid ""
"PEP authors with git push privileges for the PEP repository can update "
"the PEPs themselves by using \"git push\" or the GitHub PR interface to "
"submit their changes."
msgstr ""

#: ../../pep-0001.txt:651
msgid "Transferring PEP Ownership"
msgstr ""

#: ../../pep-0001.txt:653
msgid ""
"It occasionally becomes necessary to transfer ownership of PEPs to a new "
"champion.  In general, it is preferable to retain the original author as "
"a co-author of the transferred PEP, but that's really up to the original "
"author.  A good reason to transfer ownership is because the original "
"author no longer has the time or interest in updating it or following "
"through with the PEP process, or has fallen off the face of the 'net "
"(i.e. is unreachable or not responding to email).  A bad reason to "
"transfer ownership is because the author doesn't agree with the direction"
" of the PEP.  One aim of the PEP process is to try to build consensus "
"around a PEP, but if that's not possible, an author can always submit a "
"competing PEP."
msgstr ""

#: ../../pep-0001.txt:665
msgid ""
"If you are interested in assuming ownership of a PEP, you can also do "
"this via pull request.  Fork the `PEP repository`_, make your ownership "
"modification, and submit a pull request.  You should mention both the "
"original author and ``@python/pep-editors`` in a comment on the pull "
"request.  (If the original author's GitHub username is unknown, use "
"email.)  If the original author doesn't respond in a timely manner, the "
"PEP editors will make a unilateral decision (it's not like such decisions"
" can't be reversed :)."
msgstr ""

#: ../../pep-0001.txt:675
msgid "PEP Editor Responsibilities & Workflow"
msgstr ""

#: ../../pep-0001.txt:677
msgid ""
"A PEP editor must be added to the ``@python/pep-editors`` group on GitHub"
" and must watch the `PEP repository`_."
msgstr ""

#: ../../pep-0001.txt:680
msgid ""
"Note that developers with git push privileges for the `PEP repository`_ "
"may handle the tasks that would normally be taken care of by the PEP "
"editors. Alternately, even developers may request assistance from PEP "
"editors by mentioning ``@python/pep-editors`` on GitHub."
msgstr ""

#: ../../pep-0001.txt:685
msgid "For each new PEP that comes in an editor does the following:"
msgstr ""

#: ../../pep-0001.txt:687
msgid ""
"Make sure that the PEP is either co-authored by a core developer, has a "
"core developer as a sponsor, or has a sponsor specifically approved for "
"this PEP by the Steering Council."
msgstr ""

#: ../../pep-0001.txt:691
msgid ""
"Read the PEP to check if it is ready: sound and complete.  The ideas must"
" make technical sense, even if they don't seem likely to be accepted."
msgstr ""

#: ../../pep-0001.txt:695
msgid "The title should accurately describe the content."
msgstr ""

#: ../../pep-0001.txt:697
msgid "The file name extension is correct (i.e. ``.rst``)."
msgstr ""

#: ../../pep-0001.txt:699
msgid ""
"Make sure the appropriate core developer(s) is added to "
"`.github/CODEOWNERS` [7]_."
msgstr ""

#: ../../pep-0001.txt:702
msgid ""
"Skim the PEP for obvious defects in language (spelling, grammar, sentence"
" structure, etc.), and code style (examples should conform to PEP 8 & PEP"
" 7).  Editors may correct problems themselves, but are not required to do"
" so.  (Text format is checked by Travis CI.)"
msgstr ""

#: ../../pep-0001.txt:707
msgid ""
"If a project is portrayed as benefiting from or supporting the PEP, make "
"sure there is some direct indication from the project included to make "
"the support clear. This is to avoid a PEP accidentally portraying a "
"project as supporting a PEP when in fact the support is based on "
"conjecture."
msgstr ""

#: ../../pep-0001.txt:712
msgid ""
"If the PEP isn't ready, an editor will send it back to the author for "
"revision, with specific instructions.  If reST formatting is a problem, "
"ask the author(s) to use PEP 12 as a template and resubmit."
msgstr ""

#: ../../pep-0001.txt:716
msgid "Once the PEP is ready for the repository, a PEP editor will:"
msgstr ""

#: ../../pep-0001.txt:718
msgid ""
"Assign a PEP number (almost always just the next available number, but "
"sometimes it's a special/joke number, like 666 or 3141). (Clarification: "
"For Python 3, numbers in the 3000s were used for Py3k-specific proposals."
"  But now that all new features go into Python 3 only, the process is "
"back to using numbers in the 100s again. Remember that numbers below 100 "
"are meta-PEPs.)"
msgstr ""

#: ../../pep-0001.txt:725
msgid ""
"Check that the author has correctly labeled the PEP's type (\"Standards "
"Track\", \"Informational\", or \"Process\"), and marked its status as "
"\"Draft\"."
msgstr ""

#: ../../pep-0001.txt:729
msgid ""
"Add the PEP to a local fork of the PEP repository.  For workflow "
"instructions, follow `The Python Developers Guide "
"<http://docs.python.org/devguide>`_"
msgstr ""

#: ../../pep-0001.txt:732
msgid "The git repo for the peps is::"
msgstr ""

#: ../../pep-0001.txt:736
msgid ""
"Run ``./genpepindex.py`` and ``./pep2html.py <PEP Number>`` to ensure "
"they are generated without errors. If either triggers errors, then the "
"web site will not be updated to reflect the PEP changes."
msgstr ""

#: ../../pep-0001.txt:740
msgid "Commit and push the new (or updated) PEP"
msgstr ""

#: ../../pep-0001.txt:742
msgid ""
"Monitor python.org to make sure the PEP gets added to the site properly. "
"If it fails to appear, running ``make`` will build all of the current "
"PEPs. If any of these are triggering errors, they must be corrected "
"before any PEP will update on the site."
msgstr ""

#: ../../pep-0001.txt:747
msgid ""
"Send email back to the PEP author with next steps (post to python-list & "
"-dev)."
msgstr ""

#: ../../pep-0001.txt:750
msgid "Updates to existing PEPs should be submitted as a `GitHub pull request`_."
msgstr ""

#: ../../pep-0001.txt:752
msgid ""
"Many PEPs are written and maintained by developers with write access to "
"the Python codebase.  The PEP editors monitor the PEP repository for "
"changes, and correct any structure, grammar, spelling, or markup mistakes"
" they see."
msgstr ""

#: ../../pep-0001.txt:757
msgid ""
"PEP editors don't pass judgment on PEPs.  They merely do the "
"administrative & editorial part (which is generally a low volume task)."
msgstr ""

#: ../../pep-0001.txt:760
msgid "Resources:"
msgstr ""

#: ../../pep-0001.txt:762
msgid "`Index of Python Enhancement Proposals <http://www.python.org/dev/peps/>`_"
msgstr ""

#: ../../pep-0001.txt:764
msgid ""
"`Following Python's Development "
"<http://docs.python.org/devguide/communication.html>`_"
msgstr ""

#: ../../pep-0001.txt:767
msgid "`Python Developer's Guide <http://docs.python.org/devguide/>`_"
msgstr ""

#: ../../pep-0001.txt:769
msgid ""
"`Frequently Asked Questions for Developers "
"<http://docs.python.org/devguide/faq.html>`_"
msgstr ""

#: ../../pep-0001.txt:774
msgid "References and Footnotes"
msgstr ""

#: ../../pep-0001.txt:776
msgid ""
"This historical record is available by the normal git commands for "
"retrieving older revisions, and can also be browsed via HTTP here: "
"https://github.com/python/peps"
msgstr ""

#: ../../pep-0001.txt:780
msgid ""
"PEP 2, Procedure for Adding New Modules "
"(http://www.python.org/dev/peps/pep-0002)"
msgstr ""

#: ../../pep-0001.txt:783
msgid ""
"PEP 9, Sample Plaintext PEP Template "
"(http://www.python.org/dev/peps/pep-0009)"
msgstr ""

#: ../../pep-0001.txt:786
msgid ""
"PEP 12, Sample reStructuredText PEP Template "
"(http://www.python.org/dev/peps/pep-0012)"
msgstr ""

#: ../../pep-0001.txt:789
msgid ""
"PEP 13, Python Language Governance "
"(http://www.python.org/dev/peps/pep-0013)"
msgstr ""

#: ../../pep-0001.txt:792
msgid ""
"More details on the PEP rendering and publication process can be found in"
" the PEPs repo README at "
"https://github.com/python/peps/blob/master/README.rst"
msgstr ""

#: ../../pep-0001.txt:796
msgid ""
"`CODEOWNERS` documentation (https://docs.github.com/en/github/creating-"
"cloning-and-archiving-repositories/about-code-owners)"
msgstr ""

#: ../../pep-0001.txt:816
msgid "Copyright"
msgstr ""

#: ../../pep-0001.txt:818
msgid ""
"This document is placed in the public domain or under the "
"CC0-1.0-Universal license, whichever is more permissive."
msgstr ""

